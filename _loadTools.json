{
    "nodes": {
        "Other": [
            {
                "label": "Horizon Line",
                "file": "horizon_line.nk",
                "tooltip": "Perspective tool, to calculate the position of the horizon-line and vanishing point."
            }
        ], 
        "Keying": [
            {
                "label": "Inverse 0ver",
                "file": "inverse0ver.nk",
                "tooltip": ""
            },
            {
                "label": "Kill Outline",
                "file": "killOutline.nk",
                "tooltip": "KillOutline reduces unwanted outlines from keyed footage.\n\nerode controls: erode the alpha in for the amount of the visible outline.\n\nexpand controls: expand outer pixels of eroded image out again until it reaches the edge of the original alpha.\n\ntransition treatment: if needed, blur the transition between original image and extension."
            },
            {
                "label": "KeyChew",
                "file": "keychew.nk",
                "tooltip": ""
            }            
        ], 
        "2.5D": [
            {
                "label": "Relight",
                "file": "relight.nk",
                "tooltip": "Relights a 2D image based on rendered point positions and normal vectors in the vec input.  It also uses a camera to calculate specular.\n\nCurrently the cone in the spotlight light type matches the Nuke spotlight closely but not exactly, and the cone falloff knob is unsupported.\n\nAdditional features are diffuse wrap for simulating fill light, and energy conserving normalized specular, meaning that the specular intensity increases and decreases proportional to shininess"
            },
            {
                "label": "Rotate Normal",
                "file": "RotateNormal.nk",
                "tooltip": "This will rotate Normal-data using rotation matrixes.\nhttp://en.wikipedia.org/wiki/Rotation_matrix\n\nYou enable Normal-data in the ScanlineRender-node, create a new layer for this.\n\nTip 1:\n Link the rotation knob to the Nuke camera, revert the camera order and then either invert the matrixes or negate the angles.\nThis will convert the Normal data from World Space to Camera Space. I guess. I am no expert on the subject.\n\n\nTip 2:\nPut these in your init.tcl to always render out the normals:\n\nadd_layer \{P P.x P.y P.z\}\nknob_default ScanlineRender.P_channel P\nadd_layer \{N N.x N.y N.z\}\nknob_default ScanlineRender.N_channel N\nknob_default ScanlineRender.output_shader_vectors true\n\nNote:\n In Nuke4.6 and earlier, the Normals is multiplied with the Z, so you need to divide them first. Use Channel Merge for this.\n"
            },            
            {
                "label": "Bump Normals",
                "file": "bumpNormals.nk",
                "tooltip": "Generate bump for a 3D normals pass in world space.  The input bump texture can either be flat or a 3D render."
            }
        ],         
        "Colour": [
            {
                "label": "Set Blacks",
                "file": "setBlacks.nk",
                "tooltip": "Sets Black"
            }
        ],        
        "Image": [
            {
                "label": "UV Tile",
                "file": "uvTile.nk",
                "tooltip": "Creates a proceedural UV map that can be used to check the UVs on any object. It is normalised in U and V so using a colour sample with allow you to\ncheck the UV location of any point on the model. it is STRONGLY recommended that you only output to Square formats (1:1 aspect ratio)"
            },
            {
                "label": "File Path Write",
                "file": "filePathWrite.nk",
                "tooltip": ""
            },            
        ],
        "Deep": [
            {
                "label": "DeepId Mask Example",
                "file": "deepId_example.nk",
                "tooltip": ""
            }
        ],
        "Transform": [
            {
                "label": "Camera Shake (Vector Motion Blur)",
                "file": "CameraShakeVetr.nk",
                "tooltip": "Combines vectors from an input with camera shake vectors for motion blur;\n\n* presets\n* tiling\n* pre-transform paramaters\n* combining two noise patterns together i.e. handheld & vibration)\n* being able to view the output curves with time offsets to place 'bumps' at the right moment in time\n* seperate amplitude and frequency for Transform, scale and rotation"
            },
            {
                "label": "CornerPin3D",
                "file": "CornerPin3D.nk",
                "tooltip": ""
            },   
            {
                "label": "CornerPin3D Example",
                "file": "CornerPin3dExample.nk",
                "tooltip": ""
            }
        ],
        "Filter": [
            {
                "label": "TV Fizzle",
                "file": "Fizzle.nk",
                "tooltip": "TV Simulation"
            },
           {
                "label": "Fractal Blur",
                "file": "fractalBlur.nk",
                "tooltip": "Organic distortion an rgba using a mask. Example use: break up an edge or create a stylistic effect"
            },
           {
                "label": "Defocus Bokeh",
                "file": "defocusBokeh.nk",
                "tooltip": ""
            }            
        ]
    },
    "scripts": {
        "Node Graph Layout": [
            {
                "file": "xxxx",
                "tooltip": "xxxx",
                "label": "Align Vertical"
            },
            {
                "file": "xxxx",
                "tooltip": "xxxx",
                "label": "Align Horizontal"
            }
        ],
        "Layout": [
            {
                "label": "xxxxx",
                "file": "xxxxx",
                "tooltip": "xxxxx"
            }
        ]
    }
}
