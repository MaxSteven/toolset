{
    "nodes": {
        "2D": [
            {
                "status": "released", 
                "wiki": "techCheck", 
                "shortcut": "", 
                "label": "Tech Check", 
                "value": "techCheck.nk", 
                "removeFromShows": [], 
                "tooltip": "a utility tool for checking/trouble-shooting your script before submitting"
            }, 
            {
                "status": "released", 
                "wiki": "Vignette", 
                "shortcut": "", 
                "label": "Vignette", 
                "value": "nuke.createNode('Vignette')", 
                "removeFromShows": [], 
                "tooltip": "Vignette gizmo"
            }, 
            {
                "status": "released", 
                "wiki": "bokeh", 
                "shortcut": "", 
                "label": "BokehDefocus", 
                "value": "BokehDefocus.nk", 
                "removeFromShows": [], 
                "tooltip": "creates variation of bokeh based upon lens artifacts. (HEAVY! always pre-comp, do not use in middle of script)"
            }, 
            {
                "status": "beta", 
                "wiki": "bokeh", 
                "shortcut": "", 
                "label": "BokehZDefocus", 
                "value": "BokehZDefocus.nk", 
                "removeFromShows": [], 
                "tooltip": "creates variation of bokeh based upon lens artifacts. (HEAVY! always pre-comp, do not use in middle of script)"
            }, 
            {
                "status": "released", 
                "wiki": "bokeh", 
                "shortcut": "", 
                "label": "Bokeh Blend", 
                "value": "bokehBlend.nk", 
                "removeFromShows": [], 
                "tooltip": "mini-tool to adjust edge and core values in a bokeh reference image to visually match a lens "
            }, 
            {
                "status": "released", 
                "wiki": "Normalize_Depth", 
                "shortcut": "", 
                "label": "normalizeDepth", 
                "value": "normalizeDepth.nk", 
                "removeFromShows": [], 
                "tooltip": ""
            }, 
            {
                "status": "released", 
                "wiki": "Frame_Warp", 
                "shortcut": "", 
                "label": "FrameWarp", 
                "value": "frameWarp_v002.nk", 
                "removeFromShows": [], 
                "tooltip": "Attempts to warp frame A into frame B by employing an optical flow algorithm."
            }, 
            {
                "status": "released", 
                "wiki": "FixInvalidPixels", 
                "shortcut": "", 
                "label": "FixInvalidPixels", 
                "value": "fixInvalidPixels_v001.nk", 
                "removeFromShows": [], 
                "tooltip": "Patches NaN/inf pixels with surrounding colours."
            }, 
            {
                "status": "released", 
                "wiki": "bodgeReconstruct", 
                "shortcut": "", 
                "label": "BodgeReconstruct", 
                "value": "bodgeReconstruct_v001.nk", 
                "removeFromShows": [], 
                "tooltip": "Recreates a frame range by interpolating surrounding frames"
            }, 
            {
                "status": "released", 
                "wiki": "Deflicker", 
                "shortcut": "", 
                "label": "Deflicker", 
                "value": "deflicker_v001.nk", 
                "removeFromShows": [], 
                "tooltip": "Colour-stabilizes a sequence."
            }, 
            {
                "status": "released", 
                "wiki": "Matte_MotionBlur", 
                "shortcut": "", 
                "label": "MatteMotionBlur", 
                "value": "matteMotionBlur_v001.nk", 
                "removeFromShows": [], 
                "tooltip": "Attempts to restore motion blur that's been lost during keying."
            }, 
            {
                "status": "released", 
                "wiki": "Edge_Extrude", 
                "shortcut": "", 
                "label": "EdgeExtrude", 
                "value": "edgeExtrude_v001.nk", 
                "removeFromShows": [], 
                "tooltip": "Extrudes an image outwards from the matte edges."
            }, 
            {
                "status": "released", 
                "wiki": "Halation", 
                "shortcut": "", 
                "label": "Halation", 
                "value": "halation2.nk", 
                "removeFromShows": [], 
                "tooltip": "Description Needed"
            }, 
            {
                "status": "released", 
                "wiki": "lensDistortionMaps", 
                "shortcut": "", 
                "label": "LensDistortionMaps", 
                "value": "lensDistortMaps_v001.nk", 
                "removeFromShows": [], 
                "tooltip": "A selection of distortion maps derived from some of our most prominent LensDistorts"
            }, 
            {
                "status": "released", 
                "wiki": "fixBrightEdges", 
                "shortcut": "", 
                "label": "FixBrightEdges", 
                "value": "fixBrightEdges_v001.nk", 
                "removeFromShows": [], 
                "tooltip": ""
            }, 
            {
                "status": "beta", 
                "wiki": "directionalSharpen", 
                "shortcut": "", 
                "label": "DirectionalSharpen", 
                "value": "directionalSharpen_v001.nk", 
                "removeFromShows": [], 
                "tooltip": "Applies a directional Sharpen. Useful for reducing motion blur."
            }, 
            {
                "status": "beta", 
                "wiki": "iSlideStop", 
                "shortcut": "", 
                "label": "iSlideStop", 
                "value": "iSlideStop_v001.nk", 
                "removeFromShows": [], 
                "tooltip": ""
            }
        ], 
        "Lens Flare": [
            {
                "status": "beta", 
                "wiki": "lensFlareFromSource", 
                "shortcut": "", 
                "label": "LensFlare (from source)", 
                "value": "lensFlareFromSource_v001.nk", 
                "removeFromShows": [], 
                "tooltip": "Given a tracked and stabilized lens flare and a desired position for the new flare, this tool selects the closest frame in the source footage at each point of time."
            }, 
            {
                "status": "released", 
                "wiki": "flareReflections", 
                "shortcut": "", 
                "label": "Flare Reflections", 
                "value": "flareReflections_v001.nk", 
                "removeFromShows": [], 
                "tooltip": "Simulates the behaviour of lens reflections that are moving on a line through the image centre."
            }, 
            {
                "status": "released", 
                "wiki": "glint", 
                "shortcut": "", 
                "label": "Glint", 
                "value": "glint_v001.nk", 
                "removeFromShows": [], 
                "tooltip": "Based on Nuke's Glint tools. Adds a glow and a star shape to the shot's highlights."
            }, 
            {
                "status": "released", 
                "wiki": "edgeFlare", 
                "shortcut": "", 
                "label": "EdgeFlare", 
                "value": "edgeFlare_v001.nk", 
                "removeFromShows": [], 
                "tooltip": "Simulates a specific interference pattern caused by a light source off screen."
            }
        ], 
        "Other": [
            {
                "status": "released", 
                "wiki": "BagAndTag", 
                "shortcut": "", 
                "label": "tag", 
                "value": "import ctd.bagAndTag.tag as tag;tag.Tag()", 
                "removeFromShows": [], 
                "tooltip": "Places a tag node at the selected point in the tree. Tag nodes are used in preparing a nuke script so it can be outsourced for stereo conversion"
            }, 
            {
                "status": "released", 
                "wiki": "Benchmark", 
                "shortcut": "", 
                "label": "Benchmark", 
                "value": "benchmark_v001.nk", 
                "removeFromShows": [], 
                "tooltip": "Renders the connected node and samples its performance."
            }, 
            {
                "status": "released", 
                "wiki": "NoiseGenerator", 
                "shortcut": "", 
                "label": "NoiseGenerator", 
                "value": "noiseGenerator_v001.nk", 
                "removeFromShows": [], 
                "tooltip": "Generates an easy-to-control noise expression."
            }, 
            {
                "status": "released", 
                "wiki": "expressionText", 
                "shortcut": "", 
                "label": "Expression Text", 
                "value": "expressionText.nk", 
                "removeFromShows": [], 
                "tooltip": "Generates simples python expressions for labeling"
            }
        ], 
        "3D": [
            {
                "status": "released", 
                "value": "getFaceLocator.nk", 
                "name": "getFaceLocator", 
                "tooltip": "Uses a colour picker to select a pixel, then uses the p-world and n-world values to place a card against the surface that was clicked. An axis node can then be stamped out for use in the billboard builder", 
                "label": "getFaceLocator", 
                "shortcut": "", 
                "removeFromShows": [] 
            },
            {
                "status": "released", 
                "wiki": "SequenceGeo", 
                "shortcut": "", 
                "label": "SequenceGeo ", 
                "value": "import ctd.sequenceGeo as sequenceGeo;sequenceGeo.SequenceGeo()", 
                "removeFromShows": [], 
                "tooltip": "Allows a user to browse and import the geo files for a given sequence"
            }, 
            {
                "status": "released", 
                "wiki": "worldToMesh", 
                "shortcut": "", 
                "label": "WorldToMesh", 
                "value": "worldToMesh_v001.nk", 
                "removeFromShows": [], 
                "tooltip": "Using a point position pass, this displays the CG scene as a mesh in 3D space."
            }, 
            {
                "status": "released", 
                "wiki": "spriteBuilder", 
                "shortcut": "", 
                "label": "Sprite Builder", 
                "value": "spriteBuilder.nk", 
                "removeFromShows": [], 
                "tooltip": "Takes a .geo file from houdini and populates a nuke scene with sprite cards"
            }, 
            {
                "status": "released", 
                "wiki": "PointTrackTo3D", 
                "shortcut": "", 
                "label": "PointTrackTo3D", 
                "value": "pointTrackTo3D_v001.nk", 
                "removeFromShows": [], 
                "tooltip": "Feeds a PointsTo3D with a tracked point and generates a 3D position."
            }, 
            {
                "status": "beta", 
                "wiki": "trackingCone", 
                "shortcut": "", 
                "label": "TrackingCone", 
                "value": "TrackingCone.nk", 
                "removeFromShows": [], 
                "tooltip": "3d node that creates cones for checking tracks"
            }, 
            {
                "status": "beta", 
                "wiki": "trackingConeRender", 
                "shortcut": "", 
                "label": "TrackingConeRender", 
                "value": "TrackingConeRender.nk", 
                "removeFromShows": [], 
                "tooltip": "2d node that creates cones for checking tracks using 3d camera & axis nodes"
            }, 
            {
                "status": "beta", 
                "wiki": "camShake3D", 
                "shortcut": "", 
                "label": "CamShake_3D", 
                "value": "camShake3D_v001.nk", 
                "removeFromShows": [], 
                "tooltip": "Takes a 2D camera shake and attempts to create a camera that performs the same shake."
            }, 
            {
                "status": "released", 
                "wiki": "ProjectIt", 
                "shortcut": "", 
                "label": "Plane It", 
                "value": "planeIt.nk", 
                "removeFromShows": [], 
                "tooltip": ""
            }, 
            {
                "status": "released", 
                "wiki": "ProjectIt", 
                "shortcut": "", 
                "label": "Project It", 
                "value": "projectIt.nk", 
                "removeFromShows": [], 
                "tooltip": ""
            }, 
            {
                "status": "beta", 
                "wiki": "turntableSprite", 
                "shortcut": "", 
                "label": "TurntableSprite", 
                "value": "turntableSprite_v001.nk", 
                "removeFromShows": [], 
                "tooltip": "This is a sprite that suggests a 3D object by selecting the correct frame from a turntable relative to a camera."
            }, 
            {
                "status": "beta", 
                "wiki": "projectShadows", 
                "shortcut": "", 
                "label": "ProjectShadows", 
                "value": "projectShadows_v001.nk", 
                "removeFromShows": [], 
                "tooltip": "Uses a camera and geometry to project shadows onto a scene."
            }, 
            {
                "status": "beta", 
                "wiki": "hdriSphere", 
                "shortcut": "", 
                "label": "HDRISphere", 
                "value": "hdriSphere_v001.nk", 
                "removeFromShows": [], 
                "tooltip": "Renders either a greyball or a chrome sphere for lighting reference."
            }, 
            {
                "status": "beta", 
                "wiki": "uvProject3D", 
                "shortcut": "", 
                "label": "UVProject3D", 
                "value": "uvProject3D_v001.nk", 
                "removeFromShows": [], 
                "tooltip": "Projects uvs onto geometry through a camera, while maintaining the incoming image's aspect ratio. This behaves like Project3D, with the additional benefit of generating uvs."
            }
        ], 
        "2.5D": [
            {
                "status": "released", 
                "wiki": "ramp3D", 
                "shortcut": "", 
                "label": "Ramp3D", 
                "value": "Ramp3D.nk", 
                "removeFromShows": [], 
                "tooltip": ""
            }, 
            {
                "status": "released", 
                "wiki": "noise3D", 
                "shortcut": "", 
                "label": "Noise3D", 
                "value": "Noise3D.nk", 
                "removeFromShows": [], 
                "tooltip": ""
            }, 
            {
                "status": "released", 
                "wiki": "mask3D_v2", 
                "shortcut": "", 
                "label": "Mask3D_v2", 
                "value": "Mask3D_v2.nk", 
                "removeFromShows": [], 
                "tooltip": ""
            }, 
            {
                "status": "released", 
                "wiki": "facingRatio", 
                "shortcut": "", 
                "label": "FacingRatio", 
                "value": "FacingRatio.nk", 
                "removeFromShows": [], 
                "tooltip": ""
            }, 
            {
                "status": "released", 
                "wiki": "dirLight", 
                "shortcut": "", 
                "label": "DirLight", 
                "value": "DirLight.nk", 
                "removeFromShows": [], 
                "tooltip": ""
            }, 
            {
                "status": "released", 
                "wiki": "imagePlane", 
                "shortcut": "", 
                "label": "ImagePlane", 
                "value": "ImagePlane.nk", 
                "removeFromShows": [], 
                "tooltip": ""
            }
        ]
    }, 
    "pane": {
        "FX": [
            {
                "status": "released", 
                "value": "from ctd import fxContactSheet;fxContactSheet.run()", 
                "name": "fxContactSheet", 
                "tooltip": "Creates an FX contact sheet from the selected nodes. Each contact sheet has up to 6 panels. To use, select all the reads you wish to appear in the contact sheet, as well as the fileOut at the end of the chain you want to display, then click this button", 
                "label": "FX Contact Sheet", 
                "shortcut": "", 
                "removeFromShows": [] 
            }
        ],
        "Bag and Tag": [
            {
                "status": "released", 
                "wiki": "BagAndTag", 
                "shortcut": "", 
                "label": "Bag", 
                "value": "import ctd.bagAndTag.bag as bag;bag.run()", 
                "removeFromShows": [], 
                "tooltip": "Runs through the script collecting data from any present tag nodes, before attaching fileOutDEFERREDs to them"
            },
            {
                "status": "released", 
                "wiki": "BagAndTag", 
                "shortcut": "", 
                "label": "Rebuild Comp", 
                "value": "import ctd.bagAndTag.rebuildScript as rebuildScript;rebuildScript.run()", 
                "removeFromShows": [], 
                "tooltip": "A tool for rebuilding a comp that has been through BagAndTag, using the rendered layers in place of the tags"
            }
        ],
        "ROI": [
            {
                "status": "released", 
                "wiki": "roi", 
                "shortcut": "", 
                "label": "(ROI) Top Left", 
                "value": "import ctd.setRoi as setRoi;setRoi.main(1)", 
                "removeFromShows": [], 
                "tooltip": "Sets the ROI to the region stated in the button label"
            }, 
            {
                "status": "released", 
                "wiki": "roi", 
                "shortcut": "", 
                "label": "(ROI) Top Right", 
                "value": "import ctd.setRoi as setRoi;setRoi.main(2)", 
                "removeFromShows": [], 
                "tooltip": "Sets the ROI to the region stated in the button label"
            }, 
            {
                "status": "released", 
                "wiki": "roi", 
                "shortcut": "", 
                "label": "(ROI) Save", 
                "value": "import ctd.setRoi as setRoi;setRoi.main(5)", 
                "removeFromShows": [], 
                "tooltip": "Saves the ROI so you can retore it later or in a different viewer"
            }, 
            {
                "status": "released", 
                "wiki": "roi", 
                "shortcut": "", 
                "label": "(ROI) Bot. Left", 
                "value": "import ctd.setRoi as setRoi;setRoi.main(3)", 
                "removeFromShows": [], 
                "tooltip": "Sets the ROI to the region stated in the button label"
            }, 
            {
                "status": "released", 
                "wiki": "roi", 
                "shortcut": "", 
                "label": "(ROI) Bot. Right", 
                "value": "import ctd.setRoi as setRoi;setRoi.main(4)", 
                "removeFromShows": [], 
                "tooltip": "Sets the ROI to the region stated in the button label"
            }, 
            {
                "status": "released", 
                "wiki": "roi", 
                "shortcut": "", 
                "label": "(ROI) Reset", 
                "value": "import ctd.setRoi as setRoi;setRoi.main(0)", 
                "removeFromShows": [], 
                "tooltip": "Resets the ROI to default"
            }, 
            {
                "status": "released", 
                "wiki": "roi", 
                "shortcut": "", 
                "label": "(ROI) BBox", 
                "value": "import ctd.setRoi as setRoi;setRoi.main(7)", 
                "removeFromShows": [], 
                "tooltip": "Set the ROI to the  bbox in the current viewer"
            }, 
            {
                "status": "released", 
                "wiki": "roi", 
                "shortcut": "", 
                "label": "(ROI) Restore", 
                "value": "import ctd.setRoi as setRoi;setRoi.main(6)", 
                "removeFromShows": [], 
                "tooltip": "Restores a saved ROI"
            }
        ], 
        "Layout": [
            {
                "status": "released", 
                "wiki": "OrthogonalConnect", 
                "shortcut": "", 
                "label": "Orthogonal Connect", 
                "value": "import ctd.orthogonalConnect as orthogonalConnect;orthogonalConnect.orthogonalConnect()", 
                "removeFromShows": [], 
                "tooltip": "rnh"
            }, 
            {
                "status": "released", 
                "wiki": "mirrorNodesX", 
                "shortcut": "", 
                "label": "Mirror Nodes (x)", 
                "value": "import ctd.mirrorNodes as mirrorNodes;mirrorNodes.MirrorNodes(nuke.selectedNodes()).start()", 
                "removeFromShows": [], 
                "tooltip": "Mirrors the layout of the selected nodes. The reposition is animated so the user can see which nodes end up where"
            }, 
            {
                "status": "released", 
                "wiki": "mirrorNodesY", 
                "shortcut": "", 
                "label": "Mirror Nodes (y)", 
                "value": "import ctd.mirrorNodes as mirrorNodes;mirrorNodes.MirrorNodes(nuke.selectedNodes(), direction = 'y').start()", 
                "removeFromShows": [], 
                "tooltip": "Mirrors the layout of the selected nodes. The reposition is animated so the user can see which nodes end up where"
            }
        ], 
        "Render": [
            {
                "status": "lead", 
                "wiki": "buildRedirectFileOut", 
                "shortcut": "", 
                "label": "Redirect FileOut Node", 
                "value": "import ctd.redirectFileOuts as redirectFileOuts;redirectFileOuts.buildMultFileOutOp()", 
                "removeFromShows": [], 
                "tooltip": "Creates a redirect FileOut NoOp Node and a FileOut node..(lead/sup. only)"
            }, 
            {
                "status": "lead", 
                "wiki": "submitRedirectFileOuts", 
                "shortcut": "", 
                "label": "Submit Redirect FileOuts", 
                "value": "import ctd.redirectFileOuts as redirectFileOuts;redirectFileOuts.submitRedirectFileOuts()", 
                "removeFromShows": [], 
                "tooltip": "Select FileOuts: render a fileout to a different shot folder.(lead/sup. only)"
            }, 
            {
                "status": "lead", 
                "wiki": "convertQuicktimes", 
                "shortcut": "", 
                "label": "Convert Quicktimes", 
                "value": "import ctd.fromMovie as fromMovie;fromMovie.run()", 
                "removeFromShows": [], 
                "tooltip": "Allows leads and supes to select quicktimes either from the open nuke script or from disc, and convert them to either jpeg or exr"
            }
        ], 
        "Workflow": [
            {
                "status": "released", 
                "wiki": "ExpressionClone", 
                "shortcut": "", 
                "label": "Expression Clone", 
                "value": "import ctd.exprClone as exprClone;exprClone.exprClone()", 
                "removeFromShows": [], 
                "tooltip": "creates a copy of the node linked via expressions"
            }, 
            {
                "status": "released", 
                "wiki": "ElementsToJobs", 
                "value": "import ctd.elementToJobs as etj;etj.elementsToJobs()", 
                "name": "elementToJobs", 
                "tooltip": "swaps /hosts/<machine>/user_data to /jobs/SITE/LIBRARY/ELEMENTS", 
                "label": "Library Element To Jobs", 
                "shortcut": "", 
                "removeFromShows": []
            }, 
            {
                "status": "released", 
                "value": "import ctd.multipleCopyPaste as multipleCopyPaste;multipleCopyPaste.Multipaste()", 
                "name": "pasteNodes", 
                "tooltip": "Paste nodes from clipboard to all selected nodes.", 
                "label": "Multiple Paste", 
                "wiki": "pasteNodes", 
                "shortcut": "ctrl+alt+v", 
                "label": "Multiple Paste", 
                "value": "import ctd.multipleCopyPaste as multipleCopyPaste;multipleCopyPaste.Multipaste()", 
                "removeFromShows": [], 
                "tooltip": "Paste nodes from clipboard to all selected nodes."
            }, 
            {
                "status": "released", 
                "wiki": "multiConnect", 
                "shortcut": "alt+shift+y", 
                "label": "Connect All Inputs", 
                "value": "import ctd.miscTools as miscTools;miscTools.MultiConnect()", 
                "removeFromShows": [], 
                "tooltip": "Connect all inputs to the last selected node. Like Edit->Node->Connect, but for multiple nodes."
            }, 
            {
                "status": "released", 
                "wiki": "fetchViewer", 
                "shortcut": "", 
                "label": "Fetch Viewer", 
                "value": "import ctd.miscTools as miscTools;miscTools.fetchViewer()", 
                "removeFromShows": [], 
                "tooltip": "Fetches the current viewer and dumps it in the visible dag"
            }, 
            {
                "status": "released", 
                "wiki": "deleteRedundant", 
                "shortcut": "", 
                "label": "Delete Redundant Inputs", 
                "value": "import deleteRedundantInputs; deleteRedundantInputs.deleteRedundantInputs()", 
                "removeFromShows": [], 
                "tooltip": ""
            }, 
            {
                "status": "released", 
                "wiki": "createInstance", 
                "shortcut": "shift+i", 
                "label": "Create Instance", 
                "value": "import ctd.createInstance as createInstance;createInstance.CreateInstance()", 
                "removeFromShows": [], 
                "tooltip": "Creates a PostageStamp and hides the input"
            }, 
            {
                "status": "beta", 
                "wiki": "postageStampDupes", 
                "shortcut": "shift+i", 
                "label": "Postage Stamp Dupe", 
                "value": "import ctd.postageStampDupes as postageStampDupes;postageStampDupes.postageStampGenerator()", 
                "removeFromShows": [], 
                "tooltip": "Generates postage stamps from selected nodes if duplicates found"
            }, 
            {
                "status": "released", 
                "wiki": "findPublishedSequence", 
                "shortcut": "", 
                "label": "Find Pub. Renders: All", 
                "value": "from ctd import findPublishedSequence;findPublishedSequence.run(selected = False)", 
                "removeFromShows": [], 
                "tooltip": "goes through ALL read nodes and updates local sequences to their published equivalents where possible"
            }, 
            {
                "status": "released", 
                "wiki": "findPublishedSequence", 
                "shortcut": "", 
                "label": "Find Pub. Renders: Sel", 
                "value": "from ctd import findPublishedSequence;findPublishedSequence.run(selected = True)", 
                "removeFromShows": [], 
                "tooltip": "goes through SELECTED read nodes and updates local sequences to their published equivalents where possible"
            }
        ], 
        "Labeling": [
            {
                "status": "released", 
                "wiki": "autoDot", 
                "shortcut": "", 
                "label": "AOV Labeling", 
                "value": "import ctd.aovLabeling as aovLabeling;aovLabeling.aovLabeling()", 
                "removeFromShows": [], 
                "tooltip": "Attaches a Dot with the shortened name of the Read node in the label AND adds shuffle node with the right channel set to the IN AND adds a noop node with the channel name as its name. rnh"
            }, 
            {
                "status": "beta", 
                "wiki": "auto_label_cg", 
                "shortcut": "", 
                "label": "Auto Label CG", 
                "value": "import autoLabelCG;autoLabelCG.setupAutoLabel()", 
                "removeFromShows": [], 
                "tooltip": "Auto Labels CG"
            }, 
            {
                "status": "released", 
                "wiki": "DotLabel", 
                "shortcut": "", 
                "label": "Dot Label", 
                "value": "import ctd.dotlabel as dotlabel;dotlabel.dotlabel()", 
                "removeFromShows": [], 
                "tooltip": "Attaches the NAME of the next upstream NoOp node to a selected Dot node"
            }, 
            {
                "status": "released", 
                "wiki": "DotLabel", 
                "shortcut": "", 
                "label": "Remove Dot Label", 
                "value": "import ctd.removeLabel as removeLabel;removeLabel.removeLabel()", 
                "removeFromShows": [], 
                "tooltip": "removes the label from a selected Dot node"
            }, 
            {
                "status": "released", 
                "wiki": "MarkHiddenInputs", 
                "shortcut": "", 
                "label": "Mark hidden Inputs", 
                "value": "import ctd.markHiddenInput as markHiddenInput;markHiddenInput.mark()", 
                "removeFromShows": [], 
                "tooltip": "Adds an icon to all nodes with a hidden input and output. This function has no autoupdate! Please press function again to update manually. rnh"
            }, 
            {
                "status": "released", 
                "wiki": "MarkHiddenInputs", 
                "shortcut": "", 
                "label": "Unmark hidden Inputs", 
                "value": "import ctd.markHiddenInput as markHiddenInput;markHiddenInput.unmark()", 
                "removeFromShows": [], 
                "tooltip": "Removes all icons set by - Mark Hidden Input"
            }, 
            {
                "status": "released", 
                "wiki": "TogglePostagestamp", 
                "shortcut": "", 
                "label": "Toggle Postagestamp", 
                "value": "import ctd.togglePostagestamp as togglePostagestamp;togglePostagestamp.togglePostagestamp()", 
                "removeFromShows": [], 
                "tooltip": "Toggles the postagestamp knob of selected nodes on/off"
            }, 
            {
                "status": "released", 
                "wiki": "LabelRenderCams", 
                "shortcut": "", 
                "label": "Label Render Cams", 
                "value": "import ctd.labelRenderCams as labelRenderCams;labelRenderCams.labelRenderCams()", 
                "removeFromShows": [], 
                "tooltip": "colours zen cameras connected to ScanlineRender nodes pink and appends RenderCam to the label. jch"
            }, 
            {
                "status": "released", 
                "wiki": "fastLabel", 
                "shortcut": "", 
                "label": "Fast Label", 
                "value": "import ctd.fastLabel as fastLabel;fastLabel.FastLabel()", 
                "removeFromShows": [], 
                "tooltip": "edit the label of a selected node without opening it in the properties that can be slow in big scripts"
            }
        ], 
        "Channels": [
            {
                "status": "released", 
                "wiki": "ChannelShuffle", 
                "shortcut": "ctrl+alt+S", 
                "label": "Channel Shuffle", 
                "value": "import ctd.channelShuffle as channelShuffle;channelShuffle.channelShuffle()", 
                "removeFromShows": [], 
                "tooltip": "ctrl+alt+S Adds a shuffle node to a selected Read node and set the channel IN to the first channel of the Read node"
            }, 
            {
                "status": "released", 
                "wiki": "ReorderSplitRGBA", 
                "shortcut": "", 
                "label": "Reorder Split RGBA", 
                "value": "import ctd.reorderSplit as reorderSplit;reorderSplit.reorderSplit()", 
                "removeFromShows": [], 
                "tooltip": "Adds 3 shuffle node to the selected node - RRR - GGG - BBB - AAA rnh"
            }
        ], 
        "Camera": [
            {
                "status": "released", 
                "wiki": "cameraCoverage", 
                "shortcut": "", 
                "label": "Camera Coverage", 
                "value": "import ctd.cameraCoverage as cameraCoverage;cameraCoverage.Start()", 
                "removeFromShows": [], 
                "tooltip": "Creates a setup from the selected cameras that projects all FOVs onto a sphere. This visualizes which parts of your environment is covered."
            }, 
            {
                "status": "released", 
                "wiki": "cameraMotion", 
                "shortcut": "", 
                "label": "Camera Motion", 
                "value": "import ctd.cameraMotion as cameraMotion;cameraMotion.Start()", 
                "removeFromShows": [], 
                "tooltip": "Evaluates translation and rotation of each selected camera and visualizes the amount of camera motion. This way, you can easily see which parts of the plate are still. Good for selecting clean frames. "
            }, 
            {
                "status": "released", 
                "wiki": "zenCamTools", 
                "shortcut": "", 
                "label": "Add ZenCamTools", 
                "value": "import ctd.zenCamTools as zenCamTools; zenCamTools.zenCamTools()", 
                "removeFromShows": [], 
                "tooltip": "Adds some extra functionality to the zenCamera nodes such as camera float, camera repositioning to match editorial reference or for composition, converting footage from one filming format to another and so on"
            }, 
            {
                "status": "released", 
                "wiki": "imagePlaneSpawner", 
                "shortcut": "", 
                "label": "Image Plane Spawner", 
                "value": "import ctd.imagePlaneSpawner as imagePlaneSpawner;imagePlaneSpawner.imagePlaneSpawner()", 
                "removeFromShows": [], 
                "tooltip": "Creates a card which is linked to the selected camera, similar to an image plane in Maya. Just plug your delensed plate into it and attach it to the scene node and you can see your plate in the 3D viewer"
            }
        ], 
        "Script Fixes": [
            {
                "status": "released", 
                "wiki": "updateSequenceGeo", 
                "shortcut": "", 
                "label": "Fix Sequence Geos", 
                "value": "import ctd.updateSequenceGeo as updateSequenceGeo;updateSequenceGeo.run()", 
                "removeFromShows": [], 
                "tooltip": "Script for fixing the old sequenceGeo nodes so that they work with the new sequenceGeo module location"
            }, 
            {
                "status": "released", 
                "wiki": "MPassOptimiser", 
                "shortcut": "", 
                "label": "MPass Optimiser", 
                "value": "import ctd.MPassOptimiser as MPassOptimiser;MPassOptimiser.recursiveMPassSearch()", 
                "removeFromShows": [], 
                "tooltip": "Recursively scans through a script looking for old MPass nodes and removing the reload(module) functions from the callbacks. This should speed things up a bit!"
            }
        ], 
        "Formats": [
            {
                "status": "released", 
                "wiki": "reformatRoto", 
                "shortcut": "", 
                "label": "Reformat Roto", 
                "value": "import ctd.reformat as reformat;reformat.reformatRoto()", 
                "removeFromShows": [], 
                "tooltip": "Reformat a selected roto node internally to a format vector transform to preserve quality"
            }, 
            {
                "status": "released", 
                "wiki": "reformatTracker", 
                "shortcut": "", 
                "label": "Reformat Tracker", 
                "value": "import ctd.reformat as reformat;reformat.reformatTracker()", 
                "removeFromShows": [], 
                "tooltip": "Reformat a selected tracker node to & from a format "
            }
        ], 
        "AOVs": [
            {
                "status": "released", 
                "wiki": "renameIDshuffle", 
                "shortcut": "", 
                "label": "Rename AOV Channel", 
                "value": "import ctd.renameID as renameID;renameID.main(nuke.selectedNodes(),True)", 
                "removeFromShows": [
                    "AF", 
                    "MIS"
                ], 
                "tooltip": "shuffles out and renames an ID from a selected read node(see: showTools>info tab>aov channel rename"
            }, 
            {
                "status": "released", 
                "wiki": "ShuffleID", 
                "shortcut": "", 
                "label": "Shuffle globalMatte ID", 
                "value": "import ctd.shuffleID as shuffleID;shuffleID.shuffleID()", 
                "removeFromShows": [
                    "AF", 
                    "MIS"
                ], 
                "tooltip": "shuffles globalMatte ID's (uses renames where available)"
            }, 
            {
                "status": "released", 
                "wiki": "AOVupdater", 
                "shortcut": "", 
                "label": "AOV Updater", 
                "value": "import ctd.AOVImporter as AOVImporter; updater = AOVImporter.ImportAOVS(); updater.show()", 
                "removeFromShows": [
                    "AF", 
                    "MIS"
                ], 
                "tooltip": "Allows users to check their scenes have all available aovs for all beauties in their script. Allows the user to import any aovs they dont have"
            }, 
            {
                "status": "lead", 
                "wiki": "AOVLabelEditor", 
                "shortcut": "", 
                "label": "AOV Label Editor", 
                "value": "import ctd.LabelEditor.LabelEditor as LabelEditor; LabelEditor.run()", 
                "removeFromShows": [
                    "AF", 
                    "MIS"
                ], 
                "tooltip": "Tool for renaming specific pass id's such as GlobalMatte ids and light IDs"
            }
        ], 
        "Black Levels": [
            {
                "status": "lead", 
                "wiki": "SampleBaseBlack", 
                "shortcut": "", 
                "label": "Film edge", 
                "value": "import ctd.blackLevels as blackLevels;blackLevels.userSampleBaseBlack()", 
                "removeFromShows": [], 
                "tooltip": "Select Reads: Sample base black*, run curveTool . (*This only works on film scans with a base black edge)."
            }, 
            {
                "status": "lead", 
                "wiki": "BuildBlackMin2k", 
                "shortcut": "", 
                "label": "No Film Edge", 
                "value": "import ctd.blackLevels as blackLevels;blackLevels.userBuildBlackMin2k()", 
                "removeFromShows": [], 
                "tooltip": "Select Reads: add degrain, run curve tool"
            }, 
            {
                "status": "lead", 
                "wiki": "BuildBlackMin", 
                "shortcut": "", 
                "label": "No Film Edge(precomp)", 
                "value": "import ctd.blackLevels as blackLevels;blackLevels.userBuildBlackMin()", 
                "removeFromShows": [], 
                "tooltip": "Select Reads: add degrain and fileout. (plates larger than 2k require to be rendered out first before running the curve tool)"
            }, 
            {
                "status": "lead", 
                "wiki": "runSBlackcurve", 
                "shortcut": "", 
                "label": "This Frame", 
                "value": "import ctd.blackLevels as blackLevels;blackLevels.userMinFromCurveTool(True,True)", 
                "removeFromShows": [], 
                "tooltip": "Select curveTools:  and add  to ireq without runing curve tool."
            }, 
            {
                "status": "lead", 
                "wiki": "runBlackcurve", 
                "shortcut": "", 
                "label": "All Frames", 
                "value": "import ctd.blackLevels as blackLevels;blackLevels.userMinFromCurveTool()", 
                "removeFromShows": [], 
                "tooltip": "Select curveTools: Run curveTool, and add  to ireq.."
            }, 
            {
                "status": "lead", 
                "wiki": "inputBlackLevel", 
                "shortcut": "", 
                "label": "Read: To ireq", 
                "value": "import ctd.blackLevels as blackLevels;blackLevels.userInputBlackLevel()", 
                "removeFromShows": [], 
                "tooltip": "Select Reads: Manualy add the black level in ireq."
            }, 
            {
                "status": "lead", 
                "wiki": "findBlackInfo", 
                "shortcut": "", 
                "label": "Read: Info", 
                "value": "import ctd.blackLevels;blackLevels.userFindBlackInfo()", 
                "removeFromShows": [], 
                "tooltip": "Select Reads::display the black level info from ireq.."
            }
        ], 
        "3D": [
            {
                "status": "released", 
                "wiki": "sixPackToLatLong", 
                "shortcut": "", 
                "label": "6-Pack to LatLong", 
                "value": "import ctd._3DTools as _3DTools;_3DTools.CreateLatLongSetup()", 
                "removeFromShows": [], 
                "tooltip": "Creates a LatLong setup from the six selected textures."
            }, 
            {
                "status": "beta", 
                "wiki": "cardDistanceFromCam", 
                "shortcut": "", 
                "label": "Card Distance From Cam", 
                "value": "import ctd.cardDistanceFromCam as cardDistanceFromCam;cardDistanceFromCam.main()", 
                "removeFromShows": [], 
                "tooltip": "Select a card and a Camera, and easily adjust the distance of the card from the camera.(rather than nuke's current method of moving the projected surface (not the position of the card), and the card being fixed to the cameras fov"
            }
        ]
    }
}
